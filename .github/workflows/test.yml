name: CI

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          # See src/test/scala/com/snowplowanalytics/snowplow/postgres/loader/Database.scala
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: snowplow
          POSTGRES_PORT: 5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
    - name: Prepare test environment
      run: $GITHUB_WORKSPACE/.github/start_environment.sh
    - name: Run common module tests
      run: sbt "project common" clean coverage test
    - name: Run loader module tests
      run: sbt "project loader" clean coverage test
    - name: Aggregate coverage data
      if: ${{ always() }}
      run: sbt coverageAggregate
    - name: Submit coveralls data
      if: ${{ always() }}
      run: sbt coverageReport coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  deploy:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
    - name: Get current version
      id: ver
      run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
    - name: Docker login
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    - name: Stage the Docker build
      run: sbt "project loader" docker:stage
    - name: Docker metadata
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: snowplow/snowplow-postgres-loader
        tags: |
          type=raw,value=latest,enable=${{ !contains(steps.ver.outputs.tag, 'rc') }}
          type=raw,value=${{ steps.ver.outputs.tag }}
        flavor: |
          latest=false
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Push image
      uses: docker/build-push-action@v2
      with:
        context: modules/loader/target/docker/stage
        file: modules/loader/target/docker/stage/Dockerfile
        platforms: linux/amd64,linux/arm64/v8
        tags: ${{ steps.meta.outputs.tags }}
        push: true

  deploy_common:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
    - name: Deploy common on Bintray Maven and Maven Central
      run: sbt "project common" ci-release
      env:
        PGP_PASSPHRASE: ${{ secrets.SONA_PGP_PASSPHRASE }}
        PGP_SECRET: ${{ secrets.SONA_PGP_SECRET }}
        SONATYPE_USERNAME: ${{ secrets.SONA_USER }}
        SONATYPE_PASSWORD: ${{ secrets.SONA_PASS }}

  github_release:
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: coursier/cache-action@v6
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: adopt
    - name: Get current version
      id: ver
      run: echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
    - name: Assemble fat jars
      run: sbt "project loader; set assembly / test := {}; assembly"
    - name: Create GitHub release and attach artifacts
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: ${{ contains(steps.ver.outputs.tag, 'rc') }}
        name: ${{ steps.ver.outputs.tag }}
        tag_name: ${{ steps.ver.outputs.tag }}
        files: |
          modules/loader/target/scala-2.13/snowplow-postgres-loader-${{ steps.ver.outputs.tag }}.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
